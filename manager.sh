#!/usr/bin/env bash
###############################################
# File Name : manager.sh
#    Author : rootkiter
#    E-mail : rootkiter@rootkiter.com
#   Created : 2017-09-28 01:34:58 PDT
###############################################

function HelpPage(){
    echo "$0 is a tool for managing Go project"
    echo ""
    echo "Usage :"
    echo ""
    echo "The commands are:"
    echo ""
    echo "    init            export \$GOPATH=`pwd` && /bin/bash"
    echo "    new  [xx.go]    mkdir src && mkdir src/main && put xx.go there"
    echo "                    You can run this file directly"
    echo "    package [xx]    mkdir src && mkdir src/xx && put xx.go there"
    echo "                    Create a package that contains test code"
    echo "    clean           rm -rf bin pkg"
    echo ""
    exit 1
}

function init(){
    if [ $GO_MANAGE_TOOL_INIT ]; then
        exit 1
    fi
    export GO_MANAGE_TOOL_INIT="GO_MANAGE_TOOL_INIT"
    export GOPATH=`pwd` && /bin/bash
}

function new_file(){
    echo "package main" > $1
    echo "" >> $1
    echo "import (" >> $1
    echo "    \"os\"" >> $1
    echo "    \"fmt\"" >> $1
    echo ")" >> $1
    echo "" >> $1

    echo "func main() {" >> $1
    echo "    args := os.Args" >> $1
    echo "    fmt.Printf(\"%s\\n\",\"Hello, Golang!\")" >> $1
    echo "    fmt.Println(len(args))" >> $1
    echo "    fmt.Println(args)" >> $1
    echo "}" >> $1

    echo "You can run $1 now. "
    echo ""
    echo "$ go run $1"
    echo ""
}

function new_package(){
    FILE=$2/$1.go
    echo "/* This is a package file generated by \`bash $3 package $1\`." > $FILE
    echo "   You can change it according to your own needs." >> $FILE
    echo "   Help your self. */" >> $FILE
    echo "package $1" >> $FILE
    echo "" >> $FILE

    echo "import (" >> $FILE
    echo "    \"fmt\"" >> $FILE
    echo ")" >> $FILE
    echo "" >> $FILE

    echo "// Input: two integers." >> $FILE
    echo "// Return: the sum." >> $FILE
    echo "func Add(a int,b int) int { " >> $FILE
    echo "    return a+b" >> $FILE
    echo "}" >> $FILE
    echo "">> $FILE

    echo "// Sample function." >> $FILE
    echo "func FuncSample() {" >> $FILE
    echo "    fmt.Println(\"LoadConfig Function Call\n\")" >> $FILE
    echo "}" >> $FILE
    echo "" >> $FILE
    echo "// BUG(rootkiter): #1: FuncSample() has not been completed yet." >> $FILE
    echo "" >> $FILE


    TEST_FILE=$2/$1_test.go
    echo "package $1" > $TEST_FILE
    echo "" >> $TEST_FILE
    echo "import \"testing\"" >> $TEST_FILE
    echo "" >> $TEST_FILE
    echo "func TestAdd1(t *testing.T) {" >> $TEST_FILE
    echo "    r := Add(1,2)" >> $TEST_FILE
    echo "    if r != 3 {" >> $TEST_FILE
    echo "        t.Errorf(\"Add(1, 2) failed. Got %d, expected 3.\", r)" >> $TEST_FILE
    echo "    }" >> $TEST_FILE
    echo "}" >> $TEST_FILE
    
    echo "You can test $1 now. "
    echo "PS: Remember to execute 'bash $3 init' first"
    echo ""
    echo "$ bash $3 init"
    echo "$ go test $1"
    echo ""
}

if [ 0 -eq $# ]; then
    HelpPage $0
elif [ 1 -eq $# ] && [ "initxx" == $1"xx" ]; then
    init
elif [ 1 -eq $# ] && [ "cleanxx" == $1"xx" ]; then
    rm -rf bin pkg
elif [ 2 -eq $# ] && [ "newxx" == $1"xx" ];then
    test -d src || mkdir src
    test -d src/main || mkdir src/main
    test -f src/main/$2 || new_file src/main/$2
elif [ 2 -eq $# ] && [ "packagexx" == $1"xx" ];then
    test -d src || mkdir src
    test -d src/$2 || mkdir src/$2
    test -f src/$2/$2.go || new_package $2 src/$2/ $0
else
    HelpPage $0
fi
